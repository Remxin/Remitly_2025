// Code generated by MockGen. DO NOT EDIT.
// Source: example.com/m/v2/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "example.com/m/v2/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddNewSwiftCode mocks base method.
func (m *MockStore) AddNewSwiftCode(arg0 context.Context, arg1 db.AddNewSwiftCodeParams) (db.SwiftDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewSwiftCode", arg0, arg1)
	ret0, _ := ret[0].(db.SwiftDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewSwiftCode indicates an expected call of AddNewSwiftCode.
func (mr *MockStoreMockRecorder) AddNewSwiftCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewSwiftCode", reflect.TypeOf((*MockStore)(nil).AddNewSwiftCode), arg0, arg1)
}

// CreateSwiftData mocks base method.
func (m *MockStore) CreateSwiftData(arg0 context.Context, arg1 db.CreateSwiftDataParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwiftData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSwiftData indicates an expected call of CreateSwiftData.
func (mr *MockStoreMockRecorder) CreateSwiftData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwiftData", reflect.TypeOf((*MockStore)(nil).CreateSwiftData), arg0, arg1)
}

// DeleteSwiftCode mocks base method.
func (m *MockStore) DeleteSwiftCode(arg0 context.Context, arg1 string) (db.SwiftDatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSwiftCode", arg0, arg1)
	ret0, _ := ret[0].(db.SwiftDatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSwiftCode indicates an expected call of DeleteSwiftCode.
func (mr *MockStoreMockRecorder) DeleteSwiftCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSwiftCode", reflect.TypeOf((*MockStore)(nil).DeleteSwiftCode), arg0, arg1)
}

// GetDetailsCountry mocks base method.
func (m *MockStore) GetDetailsCountry(arg0 context.Context, arg1 string) ([]db.GetDetailsCountryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailsCountry", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDetailsCountryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailsCountry indicates an expected call of GetDetailsCountry.
func (mr *MockStoreMockRecorder) GetDetailsCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailsCountry", reflect.TypeOf((*MockStore)(nil).GetDetailsCountry), arg0, arg1)
}

// GetDetailsSwift mocks base method.
func (m *MockStore) GetDetailsSwift(arg0 context.Context, arg1 string) ([]db.GetDetailsSwiftRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailsSwift", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDetailsSwiftRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailsSwift indicates an expected call of GetDetailsSwift.
func (mr *MockStoreMockRecorder) GetDetailsSwift(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailsSwift", reflect.TypeOf((*MockStore)(nil).GetDetailsSwift), arg0, arg1)
}
